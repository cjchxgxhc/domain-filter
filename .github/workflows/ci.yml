name: Domain Filter CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # 每天UTC 00:00运行
  workflow_dispatch:  # 支持手动触发

env:
  MIHOMO_VERSION: 1.19.12  # Mihomo版本

jobs:
  build-and-commit:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 授予仓库内容读写权限
      pull-requests: write  # 允许创建/更新PR

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史以便提交和清理

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Run filter script
        run: |
          python filter.py
        continue-on-error: false  # 脚本失败时停止工作流

      - name: Download and setup Mihomo
        run: |
          wget https://github.com/MetaCubeX/mihomo/releases/download/v${{ env.MIHOMO_VERSION }}/mihomo-linux-amd64-v${{ env.MIHOMO_VERSION }}.gz
          gzip -d mihomo-linux-amd64-v${{ env.MIHOMO_VERSION }}.gz
          chmod +x mihomo-linux-amd64-v${{ env.MIHOMO_VERSION }}
          mv mihomo-linux-amd64-v${{ env.MIHOMO_VERSION }} mihomo

      - name: Convert Clash YAML to MRS
        run: |
          for yaml_file in OUTPUT/*/clash.yaml; do
            if [ -f "$yaml_file" ]; then
              mrs_file="${yaml_file%.yaml}.mrs"
              ./mihomo convert-ruleset domain yaml "$yaml_file" "$mrs_file"
              if [ -f "$mrs_file" ]; then
                echo "成功转换：$mrs_file"
              else
                echo "错误：无法生成 $mrs_file" >&2
                exit 1
              fi
            fi
          done

      - name: Clean up Mihomo
        run: |
          rm -rf mihomo*

      - name: Verify output files
        run: |
          echo "检查输出文件："
          ls -lR OUTPUT/
          for group_dir in OUTPUT/*; do
            if [ -d "$group_dir" ]; then
              group=$(basename "$group_dir")
              echo "检查组：$group"
              if [ -f "$group_dir/adblock.txt" ]; then
                echo "找到AdBlock文件：$group_dir/adblock.txt"
                head -n 5 "$group_dir/adblock.txt"
              else
                echo "错误：未找到 $group_dir/adblock.txt" >&2
                exit 1
              fi
              if [ -f "$group_dir/clash.yaml" ]; then
                echo "找到Clash YAML文件：$group_dir/clash.yaml"
                head -n 5 "$group_dir/clash.yaml"
              else
                echo "错误：未找到 $group_dir/clash.yaml" >&2
                exit 1
              fi
              if [ -f "$group_dir/clash.mrs" ]; then
                echo "找到MRS文件：$group_dir/clash.mrs"
                head -n 5 "$group_dir/clash.mrs"
              else
                echo "错误：未找到 $group_dir/clash.mrs" >&2
                exit 1
              fi
            fi
          done

      - name: Commit and push changes
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add OUTPUT/*/*
          if git diff --staged --quiet; then
            echo "没有文件变更，无需提交"
          else
            git commit -m "更新过滤后的域名文件和MRS文件 [自动生成]"
            git push origin main
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up old commits (keep last 3)
        run: |
          # 获取当前提交哈希
          CURRENT_COMMIT=$(git rev-parse HEAD)
          # 获取最近三次提交（包括当前提交）
          KEEP_COMMITS=$(git log --pretty=%H -n 3)
          # 获取所有提交
          ALL_COMMITS=$(git log --pretty=%H)
          # 计算需要删除的旧提交
          DELETE_COMMITS=$(comm -23 <(echo "$ALL_COMMITS" | sort) <(echo "$KEEP_COMMITS" | sort))
          if [ -z "$DELETE_COMMITS" ]; then
            echo "无需清理旧提交"
          else
            # 创建临时分支
            git checkout -b temp-cleanup
            # 重置到最早保留的提交
            git reset --hard $(echo "$KEEP_COMMITS" | tail -n 1)
            # 强制推送，覆盖旧历史
            git push origin temp-cleanup --force
            # 切换回 main 并更新
            git checkout main
            git reset --hard origin/temp-cleanup
            git push origin main --force
            # 删除临时分支
            git push origin --delete temp-cleanup
            echo "已清理旧提交，保留最近三次"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Log completion
        run: echo "工作流完成，输出文件已提交，提交历史已清理"
